series.create = \
INSERT \
  INTO series \
     ( category_id \
     , country_id \
     , quantity \
     , perforated \
     , release_day \
     , release_month \
     , release_year \
     , michel_price \
     , scott_price \
     , yvert_price \
     , gibbons_price \
     , solovyov_price \
     , zagorski_price \
     , comment \
     , created_at \
     , created_by \
     , updated_at \
     , updated_by \
     ) \
VALUES \
     ( :category_id \
     , :country_id \
     , :quantity \
     , :perforated \
     , :release_day \
     , :release_month \
     , :release_year \
     , :michel_price \
     , :scott_price \
     , :yvert_price \
     , :gibbons_price \
     , :solovyov_price \
     , :zagorski_price \
     , :comment \
     , :created_at \
     , :created_by \
     , :updated_at \
     , :updated_by \
     )

series.mark_as_modified = \
UPDATE series \
   SET updated_at = :updated_at \
     , updated_by = :updated_by \
 WHERE id = :series_id

series.find_all_for_sitemap = \
SELECT s.id, s.updated_at \
  FROM series s

series.find_similar_series = \
   SELECT s.id \
        , s.release_year \
        , s.quantity \
        , s.perforated \
        , CASE WHEN 'ru' = :lang THEN COALESCE(count.name_ru, count.name) ELSE count.name END AS country_name \
     FROM series s \
LEFT JOIN countries count \
       ON count.id = s.country_id \
    WHERE s.id IN \
        ( \
          SELECT \
            CASE WHEN series_id != :id \
                 THEN series_id \
                 ELSE similar_series_id \
             END AS id \
            FROM similar_series \
           WHERE series_id = :id \
              OR similar_series_id = :id \
        )

series.find_last_added = \
   SELECT s.id \
        , s.release_year \
        , s.quantity \
        , s.perforated \
        , CASE WHEN 'ru' = :lang THEN COALESCE(count.name_ru, count.name) ELSE count.name END AS country_name \
     FROM series s \
LEFT JOIN countries count \
       ON count.id = s.country_id \
 ORDER BY s.id DESC \
    LIMIT :quantity

series.find_full_info_by_id = \
   SELECT s.id \
        , cat.id AS category_id \
        , cat.slug AS category_slug \
        , CASE WHEN 'ru' = :lang THEN COALESCE(cat.name_ru, cat.name) ELSE cat.name END AS category_name \
        , count.id AS country_id \
        , count.slug AS country_slug \
        , CASE WHEN 'ru' = :lang THEN COALESCE(count.name_ru, count.name) ELSE count.name END AS country_name \
        , s.release_day \
        , s.release_month \
        , s.release_year \
        , s.quantity \
        , s.perforated \
        , s.michel_price \
        , s.scott_price \
        , s.yvert_price \
        , s.gibbons_price \
        , s.solovyov_price \
        , s.zagorski_price \
        , s.comment \
        , s.created_by \
     FROM series s \
     JOIN categories cat \
       ON cat.id = s.category_id \
LEFT JOIN countries count \
       ON count.id = s.country_id \
    WHERE s.id = :series_id

series.find_by_ids = \
   SELECT s.id \
        , cat.id AS category_id \
        , cat.slug AS category_slug \
        , CASE WHEN 'ru' = :lang THEN COALESCE(cat.name_ru, cat.name) ELSE cat.name END AS category_name \
        , count.id AS country_id \
        , count.slug AS country_slug \
        , CASE WHEN 'ru' = :lang THEN COALESCE(count.name_ru, count.name) ELSE count.name END AS country_name \
        , s.release_day \
        , s.release_month \
        , s.release_year \
        , s.quantity \
        , s.perforated \
     FROM series s \
     JOIN categories cat \
       ON cat.id = s.category_id \
LEFT JOIN countries count \
       ON count.id = s.country_id \
    WHERE s.id IN (:series_ids)

series.find_by_category_slug = \
   SELECT s.id \
        , cat.id AS category_id \
        , cat.slug AS category_slug \
        , CASE WHEN 'ru' = :lang THEN COALESCE(cat.name_ru, cat.name) ELSE cat.name END AS category_name \
        , count.id AS country_id \
        , count.slug AS country_slug \
        , CASE WHEN 'ru' = :lang THEN COALESCE(count.name_ru, count.name) ELSE count.name END AS country_name \
        , s.release_day \
        , s.release_month \
        , s.release_year \
        , s.quantity \
        , s.perforated \
     FROM series s \
     JOIN categories cat \
       ON cat.id = s.category_id \
LEFT JOIN countries count \
       ON count.id = s.country_id \
    WHERE cat.slug = :slug

series.find_by_country_slug = \
   SELECT s.id \
        , cat.id AS category_id \
        , cat.slug AS category_slug \
        , CASE WHEN 'ru' = :lang THEN COALESCE(cat.name_ru, cat.name) ELSE cat.name END AS category_name \
        , count.id AS country_id \
        , count.slug AS country_slug \
        , CASE WHEN 'ru' = :lang THEN COALESCE(count.name_ru, count.name) ELSE count.name END AS country_name \
        , s.release_day \
        , s.release_month \
        , s.release_year \
        , s.quantity \
        , s.perforated \
     FROM series s \
     JOIN categories cat \
       ON cat.id = s.category_id \
LEFT JOIN countries count \
       ON count.id = s.country_id \
    WHERE count.slug = :slug

series.find_purchases_and_sales_by_series_id = \
   SELECT date \
        , seller.name AS seller_name \
        , seller.url AS seller_url \
        , buyer.name AS buyer_name \
        , buyer.url AS buyer_url \
        , transaction_url \
        , first_price \
        , first_currency \
        , second_price \
        , second_currency \
        , condition \
     FROM series_sales ss \
     JOIN transaction_participants seller \
       ON seller.id = ss.seller_id \
LEFT JOIN transaction_participants buyer \
       ON buyer.id = ss.buyer_id \
    WHERE ss.series_id = :series_id \
 ORDER BY ss.date DESC

series.count_all_series = \
SELECT COUNT(*) \
  FROM series

series.count_all_stamps = \
SELECT COALESCE(SUM(s.quantity), 0) \
  FROM series s

series.count_series_by_id = \
SELECT COUNT(*) \
  FROM series \
 WHERE id = :series_id

series.count_series_added_since = \
SELECT COUNT(*) \
  FROM series \
 WHERE created_at >= :date

series.count_series_updated_since = \
SELECT COUNT(*) \
  FROM series \
 WHERE updated_at >= :date

series.find_quantity_by_id = \
SELECT quantity \
  FROM series \
 WHERE id = :series_id

series.add_similar_series = \
INSERT \
  INTO similar_series \
     ( series_id \
     , similar_series_id \
     ) \
VALUES \
     ( :series_id \
     , :similar_series_id \
     )
